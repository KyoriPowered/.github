name: Run CI

on:
  workflow_call:
    inputs:
      runtime_version:
        description: 'The default Java runtime version to run builds on'
        required: false
        type: number
        default: 11
      publishing_branch_regex:
        description: 'The regular expression to determine if a certain branch build should be published'
        required: false
        type: string
        default: '(?:(?:(?:main\/)?(\d+(?:\.\d+)*(?:\.x)?)))|master|main|trunk'
      extra_gradle_params:
        description: 'Extra arguments to pass to all Gradle invocations'
        required: false
        type: string
        default: ''
      extra_gradle_publish_params:
        description: 'Extra arguments to pass to the Gradle invocation that publishes this project'
        required: false
        type: string
        default: ''
      gradle_warning_mode:
        description: 'Warning mode to set on Gradle executions'
        required: false
        type: string
        default: 'fail'
    secrets:
      SONATYPE_USERNAME:
        description: 'Kyori OSSRH Username'
        required: false
      SONATYPE_PASSWORD:
        description: 'Kyori OSSRH Password'
        required: false
      STELLARDRIFT_USERNAME:
        description: 'Kyori Stellardrift Repository Username'
        required: false
      STELLARDRIFT_PASSWORD:
        description: 'Kyori Stellardrift Repository Password'
        required: false
      KYORI_REPO_USERNAME:
        description: 'Kyori Repository Username'
        required: false
      KYORI_REPO_PASSWORD:
        description: 'Kyori Repository Password'
        required: false
      KYORI_GPG_KEY:
        description: 'Kyori GPG signing key'
        required: false
      KYORI_GPG_PASSWORD:
        description: 'Kyori GPG signing password'
        required: false

concurrency:
  group: "${{ github.workflow }}-${{ github.event.number || github.ref }}"
  cancel-in-progress: true

permissions:
  actions: "write"
  contents: "read"

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: "${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}"
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
    runs-on: "${{ matrix.os }}"
    steps:
      - name: "checkout repository"
        uses: "actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608" # v4
        with:
          fetch-depth: 0
          submodules: true
      - name: "setup jdk ${{ inputs.runtime_version }}"
        uses: "actions/setup-java@cd89f46ac9d01407894225f350157564c9c7cee2" # v3
        with:
          distribution: "temurin"
          java-version: "${{ inputs.runtime_version }}"
      - name: "validate gradle wrapper"
        uses: "gradle/wrapper-validation-action@56b90f209b02bf6d1deae490e9ef18b21a389cd4" # v1
      # Checks branch name to see if we're going to potentially publish this
      - name: "check branch for publish"
        uses: "KyoriPowered/action-regex-match@1ff8ef914f6762fff8d5efd8d56ef88b5be5dd5c" # v4
        id: "branch-name"
        with:
          text: "${{ github.ref }}"
          regex: "^refs/heads/(?:${{ inputs.publishing_branch_regex }})$" # master or something like 0.8.x or 2.x
      - name: "setup gradle properties"
        env:
          WARNING_MODE: "${{ inputs.gradle_warning_mode }}"
        shell: bash
        run: |
          # Write to gradle user home
          mkdir -p $HOME/.gradle/
          echo "org.gradle.warning.mode=$WARNING_MODE" >> $HOME/.gradle/gradle.properties

          # Ignore dependency graph files for cleanliness checks (via something JGit listens to)
          mkdir -p .git/info
          echo "/dependency-graph-reports/" > .git/info/exclude
      - name: "run gradle build"
        uses: "gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc" # v2
        with:
          dependency-graph: "generate"
          cache-read-only: "${{ steps.branch-name.outputs.match == '' || github.event_name == 'pull_request' }}"
          arguments: " ${{ inputs.extra_gradle_params }} build"
      - name: "archive test results"
        if: "${{ always() }}"
        uses: "actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32" # v3
        with:
          name: "${{ runner.os }}-test-results"
          path: |
            build/reports/
            */build/reports/
      - name: "determine status & prepare for publish"
        if: "${{ runner.os == 'Linux' }}"
        run: |
          # Disable dependency graph generation after first build, plus for this step itself
          echo "GITHUB_DEPENDENCY_GRAPH_ENABLED=false" >> $GITHUB_ENV
          export GITHUB_DEPENDENCY_GRAPH_ENABLED=false

          if [ "$(./gradlew properties | awk '/^version:/ { print $2; }' | grep '\-SNAPSHOT')" ]; then
            echo "STATUS=snapshot" >> $GITHUB_ENV
          else
            echo "STATUS=release" >> $GITHUB_ENV
          fi
      - name: "publish"
        if: "${{ runner.os == 'Linux' && env.STATUS != 'release' && github.event_name == 'push' && steps.branch-name.outputs.match != '' }}"
        run: "./gradlew ${{ inputs.extra_gradle_params }} publish ${{ inputs.extra_gradle_publish_params }}"
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: "${{ secrets.SONATYPE_USERNAME }}"
          ORG_GRADLE_PROJECT_sonatypePassword: "${{ secrets.SONATYPE_PASSWORD }}"
          ORG_GRADLE_PROJECT_stellardriftUsername: "${{ secrets.STELLARDRIFT_USERNAME }}"
          ORG_GRADLE_PROJECT_stellardriftPassword: "${{ secrets.STELLARDRIFT_PASSWORD }}"
          ORG_GRADLE_PROJECT_kyoriSigningKey: "${{ secrets.KYORI_GPG_KEY }}"
          ORG_GRADLE_PROJECT_kyoriSigningPassword: "${{ secrets.KYORI_GPG_PASSWORD }}"
          ORG_GRADLE_PROJECT_kyoriUsername: "${{ secrets.KYORI_REPO_USERNAME }}"
          ORG_GRADLE_PROJECT_kyoriPassword: "${{ secrets.KYORI_REPO_PASSWORD }}"
  upload-dependencies:
    name: "submit dependency graph"
    # try to run on build failure too?
    if: github.event_name == 'push' && always() 
    needs: "build"
    runs-on: "ubuntu-latest"
    permissions:
      contents: "write"
    steps:
      - name: "check branch for publish"
        uses: "KyoriPowered/action-regex-match@1ff8ef914f6762fff8d5efd8d56ef88b5be5dd5c" # v4
        id: "branch-name"
        with:
          text: "${{ github.ref }}"
          regex: "^refs/heads/(?:${{ inputs.publishing_branch_regex }})$" # master or something like 0.8.x or 2.x
      - name: "submit dependency graph"
        uses: "gradle/gradle-build-action@ef76a971e2fa3f867b617efd72f2fbd72cf6f8bc" # v2
        if: steps.branch-name.outputs.match != ''
        with:
          dependency-graph: "download-and-submit"

