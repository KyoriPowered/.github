name: "Run tests against latest Gradle RC/nightly"

on:
  workflow_call:
    inputs:
      runtime_version:
        description: 'The default Java runtime version to run builds on'
        required: false
        type: number
        default: 11
      injected_version_path:
        description: 'The path to write an injected versions resource (named: injected-gradle-versions) to'
        required: true
        type: string
      extra_gradle_params:
        description: 'Extra arguments to pass to all Gradle invocations'
        required: false
        type: string
        default: ''
      gradle_version:
        description: 'A gradle version override'
        required: false
        type: string
        default: "-"

concurrency:
  group: "${{ github.workflow }}-${{ github.event.number || github.ref }}"
  cancel-in-progress: true

permissions:
  actions: "write"
  contents: "read"

jobs:
  build:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
    runs-on: "${{ matrix.os }}"
    steps:
      - name: "setup environment"
        id: "setup"
        uses: "KyoriPowered/.github/.github/actions/setup-java-env@trunk"
        with:
          runtime_version: "${{ inputs.runtime_version }}"
          publishing_branch_regex: "__none__"
          gradle_warning_mode: "fail"
      - name: "determine target version"
        uses: "KyoriPowered/get-gradle-versions@6a31baddaa856d1877c5c0070e58ba8db82b1389" # v2.0.0
        id: "determine-target"
        with:
          override: "${{ inputs.gradle_version }}"
          output_file: "${{ inputs.injected_version_path }}/injected-gradle-versions"
      - name: "run gradle build / added tests on ${{ steps.determine-target.outputs.latest_rc_or_nightly }}"
        if: "${{ steps.determine-target.outputs.latest_rc_or_nightly }}"
        run: "./gradlew ${{ inputs.extra_gradle_params }} build"
      - name: "archive test results"
        if: "${{ always() }}"
        uses: actions/upload-artifact@694cdabd8bdb0f10b2cea11669e1bf5453eed0a6 # v4.2.0
        with:
          name: "${{ runner.os }}-test-results"
          path: |
            build/reports/
            */build/reports/
      - name: "run gradle build / compiling on ${{ steps.determine-target.outputs.latest_rc_or_nightly }}"
        if: "${{ always() && steps.determine-target.outputs.latest_rc_or_nightly }}"
        env:
          GRADLE_VERSION: "${{ steps.determine-target.outputs.latest_rc_or_nightly }}"
          EXTRA_GRADLE_PARAMS: "${{ inputs.extra_gradle_params }}"
        run: |
          echo "Fetching Gradle $GRADLE_VERSION"
          BASEDIR="/tmp/gradle-bins/"
          mkdir -p "$BASEDIR"
          GRADLE_DOWNLOAD_URL=$(curl "https://services.gradle.org/versions/all" | jq -r ".[] | select(.version==\"$GRADLE_VERSION\").downloadUrl")
          curl "$GRADLE_DOWNLOAD_URL" -Lo "/tmp/gradle-$GRADLE_VERSION.zip"
          unzip "/tmp/gradle-$GRADLE_VERSION.zip" -d "$BASEDIR"

          echo "Feched, executing Gradle:"
          $BASEDIR/gradle-$GRADLE_VERSION/bin/gradle $EXTRA_GRADLE_PARAMS build
